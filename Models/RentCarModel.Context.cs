//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RentCar.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RentCarDBEntities : DbContext
    {
        public RentCarDBEntities()
            : base("name=RentCarDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CR_Mas_Sup_City> CR_Mas_Sup_City { get; set; }
        public virtual DbSet<CR_Mas_Sup_Regions> CR_Mas_Sup_Regions { get; set; }
        public virtual DbSet<CR_Mas_Sup_Brand> CR_Mas_Sup_Brand { get; set; }
        public virtual DbSet<CR_Mas_Sup_Group> CR_Mas_Sup_Group { get; set; }
        public virtual DbSet<CR_Mas_Sup_Model> CR_Mas_Sup_Model { get; set; }
        public virtual DbSet<CR_Mas_Sys_System_Name> CR_Mas_Sys_System_Name { get; set; }
        public virtual DbSet<CR_Mas_Sys_Tasks> CR_Mas_Sys_Tasks { get; set; }
        public virtual DbSet<CR_Mas_User_Information> CR_Mas_User_Information { get; set; }
        public virtual DbSet<CR_Mas_Sup_Car_Features> CR_Mas_Sup_Car_Features { get; set; }
        public virtual DbSet<CR_Mas_Sup_Car_Specifications> CR_Mas_Sup_Car_Specifications { get; set; }
        public virtual DbSet<CR_Mas_User_Main_Validation> CR_Mas_User_Main_Validation { get; set; }
        public virtual DbSet<CR_Mas_User_Sub_Validation> CR_Mas_User_Sub_Validation { get; set; }
        public virtual DbSet<CR_Mas_Sup_Category_Car> CR_Mas_Sup_Category_Car { get; set; }
        public virtual DbSet<CR_Mas_Sup_Color> CR_Mas_Sup_Color { get; set; }
        public virtual DbSet<CR_Mas_Sup_Country> CR_Mas_Sup_Country { get; set; }
        public virtual DbSet<CR_Mas_Sup_Nationalities> CR_Mas_Sup_Nationalities { get; set; }
        public virtual DbSet<CR_Mas_Sup_Registration_Car> CR_Mas_Sup_Registration_Car { get; set; }
        public virtual DbSet<CR_Mas_Com_Supporting> CR_Mas_Com_Supporting { get; set; }
        public virtual DbSet<CR_Mas_Sup_Additional> CR_Mas_Sup_Additional { get; set; }
        public virtual DbSet<CR_Mas_Sup_Jobs> CR_Mas_Sup_Jobs { get; set; }
        public virtual DbSet<CR_Mas_Sup_Membership> CR_Mas_Sup_Membership { get; set; }
        public virtual DbSet<CR_Mas_Sup_Car_Model_Category> CR_Mas_Sup_Car_Model_Category { get; set; }
        public virtual DbSet<CR_Mas_Sup_Employer> CR_Mas_Sup_Employer { get; set; }
        public virtual DbSet<CR_Mas_Sup_Sector> CR_Mas_Sup_Sector { get; set; }
        public virtual DbSet<CR_Mas_Msg_Questions_Answer> CR_Mas_Msg_Questions_Answer { get; set; }
        public virtual DbSet<CR_Mas_Sup_Administrative_Financial_Process> CR_Mas_Sup_Administrative_Financial_Process { get; set; }
        public virtual DbSet<CR_Mas_Sup_Educational_Qualification> CR_Mas_Sup_Educational_Qualification { get; set; }
        public virtual DbSet<CR_Mas_Sup_Gender> CR_Mas_Sup_Gender { get; set; }
        public virtual DbSet<CR_Mas_Sup_Social> CR_Mas_Sup_Social { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
